{"version":3,"sources":["appSettings.ts","feathers.js","containers/Login.tsx","components/UsersBar.tsx","components/MessageBox.tsx","components/InputBox.tsx","components/SketchBox.tsx","components/CodeBox.tsx","containers/Chat.tsx","tools/colourPool.ts","containers/MessageService.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/BackgroundVid.tsx"],"names":["appSettings","projectName","apiUri","clientDomain","authorityDomain","socket","io","client","feathers","configure","socketio","authentication","storage","window","localStorage","Login","useState","email","setEmail","password","setPassword","updateField","name","ev","target","value","login","authenticate","strategy","then","r","console","log","catch","e","error","Fragment","Grid","textAlign","style","height","verticalAlign","Column","maxWidth","opacity","Header","as","color","Form","onSubmit","size","Segment","stacked","Input","required","fluid","icon","iconPosition","placeholder","onChange","type","Button","className","href","Icon","Message","onClick","service","create","UsersBar","props","users","onLogout","backgroundColor","Label","ribbon","length","List","map","user","Item","Image","avatar","src","alt","Content","MessageBox","messages","overflow","ref","main","message","key","_id","image","moment","createdAt","format","basic","pointing","text","InputBox","sendMessage","id","action","labelPosition","content","SketchBox","_p5","setColor","strokeWidth","setstrokeWidth","onUpdateSketchInfor","activeUserId","setCahedUserSketch","cahedUserSketch","sketchInfo","useEffect","on","drawRemote","sketch","data","userId","stroke","c","strokeWeight","w","line","x","y","px","py","width","cursor","Popup","trigger","position","right","top","onChangeComplete","hex","min","max","label","parseInt","setup","p5","canvasParentRef","frameRate","createCanvas","parent","background","i","find","mouseDragged","sd","mouseX","mouseY","pmouseX","pmouseY","Codebox","apiData","uid","code","setCode","a","update","mode","theme","highlightActiveLine","editorProps","$blockScrolling","windowLabels","Chat","sketchList","codeList","getSketchDataFromApi","setWindow","cachedUserSketch","setCachedUserSketch","scrollToBottom","handleUpdateSketch","removeListener","Row","logout","windowSelector","input","querySelector","trim","preventDefault","colourPool","isLoggedIn","MessageService","loginState","setLogin","messageList","setMessageList","usersList","setUsers","setSketchs","sketches","Promise","all","query","$sort","$limit","messagePage","userPage","codePage","reverse","getSketches","concat","sketchesPage","s","sketchColour","sketchWithColours","push","undefined","RouteModule","exact","path","component","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d91226f1.chunk.js","sourcesContent":["const appSettings = {\r\n    projectName: \"Plinx Chat\",\r\n    apiUri: \"http://localhost:3030\",\r\n    clientDomain: \"http://localhost:3000\",\r\n    authorityDomain: \"http://localhost:3030/authentication\"\r\n}\r\n\r\nexport default appSettings;","import io from 'socket.io-client';\r\nimport feathers from '@feathersjs/client';\r\nimport appSettings from './appSettings';\r\nconst socket = io(appSettings.apiUri);\r\nconst client = feathers();\r\n\r\nclient.configure(feathers.socketio(socket));\r\nclient.configure(feathers.authentication({\r\n  storage: window.localStorage\r\n}));\r\n\r\nexport default client;","import appSettings from \"../appSettings\";\r\nimport React from 'react'\r\nimport { useState, useEffect, Children } from 'react'\r\nimport { Button, Form, Grid, Header, Icon, Message, Segment } from 'semantic-ui-react'\r\nimport client from '../feathers';\r\n\r\nimport { AuthenticationResult } from \"@feathersjs/authentication/lib\";\r\n\r\n\r\nconst Login = () => {\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    const updateField = (name: string, ev: any): void => {\r\n        if (name === 'email') setEmail(ev.target.value);\r\n        else if (name === 'password') setPassword(ev.target.value);\r\n    }\r\n\r\n    const login = (): AuthenticationResult => {\r\n        return client.authenticate({\r\n            strategy: 'local',\r\n            email, password\r\n        }).then((r) => console.log(r)).catch(e => console.error(\"Something went wrong \" + e));\r\n    }\r\n   \r\n    const signup = (): void =>\r\n        client.service('users')\r\n            .create({ email, password })\r\n            .then(() => login());\r\n\r\n\r\n    return (<React.Fragment>\r\n        <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n            <Grid.Column style={{ maxWidth: 450, opacity:\"0.92\" }}>\r\n                <Header as='h2' style={{ color: \"white\" }} textAlign='center'>\r\n                    Log-in to {appSettings.projectName}\r\n                </Header>\r\n                <Form onSubmit={login}  size='large'>   \r\n                    <Segment stacked>\r\n                        <Form.Input\r\n                            required\r\n                            fluid\r\n                            icon='user'\r\n                            iconPosition='left'\r\n                            placeholder='E-mail address'\r\n                            onChange={ev => updateField('email', ev)} />\r\n                        <Form.Input\r\n                            required\r\n                            fluid\r\n                            icon='lock'\r\n                            iconPosition='left'\r\n                            placeholder='Password'\r\n                            type='password'\r\n                            onChange={ev => updateField('password', ev)}\r\n                        />\r\n                        <Button className=\"login-element\" color='teal' fluid size='large'> Login</Button>\r\n                        <br/>                     \r\n                    </Segment>\r\n                </Form>\r\n                <Button className=\"login-element\" color='teal' fluid size='large'> <small>Continue as guest</small></Button>\r\n                <Segment className=\"login-element\">\r\n                   <a href=\"http://localhost:3030/oauth/github\" target=\"_blank\"> <Icon className=\"github\" /> <small>Login with github</small></a>\r\n                </Segment>\r\n                <Segment className=\"login-element\">\r\n                <a href=\"http://localhost:3030/oauth/google\" target=\"_blank\"> <Icon className=\"google\" /> <small>Login with google</small></a>\r\n                </Segment>\r\n                <br />\r\n                <Message className=\"login-element\">\r\n                    New to us? <a onClick={signup} href='#'>Sign Up</a>\r\n                </Message>\r\n            </Grid.Column>\r\n        </Grid>\r\n    </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Login","import * as React from 'react';\r\nimport { Segment, Header, List, Image, Label } from \"semantic-ui-react\";\r\n\r\ninterface userBarProps {\r\n    users: any[]\r\n    onLogout: any\r\n}\r\n\r\nexport const UsersBar = (props: userBarProps) => {\r\n    const { users, onLogout } = props;\r\n    return (\r\n        <Segment style={{ backgroundColor: \"rgba(0,0,0,0.5)\"}}>\r\n            <Label as='a' color=\"teal\" ribbon>\r\n                {users && users.length} active users\r\n            </Label>\r\n            <List>\r\n                {users && users.map(user =>\r\n                    <List.Item>\r\n                        <Image avatar src={user.avatar} alt={user.email} />\r\n                        <List.Content>\r\n                            <List.Header style={{color:\"white\"}} >{user.email ? user.email : \"Guest\"}</List.Header>\r\n                        </List.Content>\r\n                    </List.Item>\r\n                )}\r\n            </List>\r\n            <footer>\r\n                <a href=\"#\" onClick={onLogout}>\r\n                    Sign Out\r\n            </a>\r\n            </footer>\r\n        </Segment>\r\n    );\r\n}","import moment from 'moment';\r\nimport * as React from 'react';\r\nimport { Segment, Message, Image, Label } from \"semantic-ui-react\";\r\n\r\ninterface MessageBoxProps {\r\n    messages: any[];\r\n}\r\n\r\nexport const MessageBox = (props: MessageBoxProps) => {\r\n    let chat: any = null;\r\n    const { messages } = props;\r\n    return (\r\n        <Segment style={{ height: \"80vh\", overflow: \"auto\",  backgroundColor: \"rgba(0,0,0,0.5)\" }} >\r\n            <main ref={main => { chat = main; }}>\r\n                {messages && messages.map(message => <div key={message._id}>\r\n                    <Message color=\"black\" style={{ backgroundColor: \"rgba(50,50,50,0.9)\"}} image>\r\n                        <Message.Content>\r\n                            <Message.Header> <Image avatar src={message.user.avatar} />\r\n                                {message.user.email} - <small>{moment(message.createdAt).format('MMM Do, hh:mm:ss')}</small></Message.Header>\r\n                            <Label basic pointing> {message.text}</Label>\r\n                        </Message.Content>\r\n                    </Message>\r\n                </div>)}\r\n            </main>\r\n        </Segment>)\r\n}","import * as React from 'react';\r\nimport { Form, Button, Input } from \"semantic-ui-react\";\r\n\r\ninterface InputBoxProps {\r\n    sendMessage: any;\r\n}\r\n\r\nexport const InputBox = (props: InputBoxProps) => {\r\n    const { sendMessage } = props;\r\n    return (\r\n        <Form onSubmit={sendMessage} id=\"send-message\">\r\n            <Input\r\n                action={{\r\n                    color: 'teal',\r\n                    labelPosition: 'right',\r\n                    icon: 'send',\r\n                    content: 'Send',\r\n                }}\r\n                Icon\r\n                fluid\r\n                type=\"text\"\r\n                name=\"text\"\r\n            />\r\n        </Form>\r\n    )\r\n}","import React from 'react';\r\nimport client from '../feathers';\r\nimport Sketch from 'react-p5';\r\nimport { ISketchData } from \"../sharedInterfaces/sketchInterfaces\";\r\nimport { User } from \"../sharedInterfaces/userInterfaces\";\r\nimport { sketchInfo } from \"../sharedInterfaces/sketchInterfaces\";\r\nimport { Popup, Icon, Input } from \"semantic-ui-react\";\r\nimport { SketchPicker } from 'react-color';\r\nimport { useEffect, useState} from 'react'\r\n\r\ninterface SketchBoxProps {\r\n  users: User[]; \r\n  activeUserId: string;  \r\n  cahedUserSketch: sketchInfo[];\r\n  sketchInfo:sketchInfo[];\r\n  onUpdateSketchInfor: Function;\r\n  setCahedUserSketch: Function;    \r\n}\r\n\r\nexport const SketchBox = (props: SketchBoxProps) => {\r\n\r\n  const [color, setColor] = useState<string>(\"\");\r\n  const [strokeWidth, setstrokeWidth] = useState<number>(8);\r\n\r\n  const { \r\n    onUpdateSketchInfor,\r\n    activeUserId, \r\n    users,\r\n    setCahedUserSketch,\r\n    cahedUserSketch,\r\n    sketchInfo } = props;\r\n  let _p5: any;\r\n  \r\n  useEffect(() => {\r\n    client.service('sketches').on('created', (r: ISketchData) => drawRemote(r));    \r\n  }, []);\r\n\r\n  const setup = (p5: any, canvasParentRef: any) => {\r\n    _p5 = p5;\r\n    p5.frameRate(30)\r\n    p5.createCanvas(820, 500).parent(canvasParentRef);\r\n    p5.strokeWeight(strokeWidth);\r\n    p5.background('#272822');\r\n\r\n    for (const i of sketchInfo) {      \r\n      const user = users.find(x => x._id === i.userId);\r\n      //p5.stroke(user ? user.sketchColour : null);\r\n      p5.stroke(i.c);    \r\n      p5.line(i.x, i.y, i.px, i.py);\r\n    }\r\n  }\r\n\r\n  const drawRemote = (sketch: ISketchData) => {\r\n    //Don't draw if id same as the user as this will be draw locally.    \r\n    if (sketch.data.userId === activeUserId) return;   \r\n    //const user = users.find(x => x._id === sketch.data.userId);\r\n    //_p5.stroke(user ? user.sketchColour : null);\r\n    _p5.stroke(sketch.data.c);\r\n    _p5.strokeWeight(sketch.data.w);\r\n    _p5.line(sketch.data.x, sketch.data.y, sketch.data.px, sketch.data.py);\r\n  }\r\n\r\n  const drawLocal = (p5: any, e: any) => {\r\n    const  sd:sketchInfo =   {\r\n      x: p5.mouseX,\r\n      y: p5.mouseY,\r\n      px: p5.pmouseX,\r\n      py: p5.pmouseY,\r\n      userId: activeUserId,\r\n      w: strokeWidth,\r\n      c: color\r\n    };\r\n\r\n    onUpdateSketchInfor(sd);\r\n\r\n    setCahedUserSketch([...cahedUserSketch, sd])\r\n    //const user = users.find(x => x._id === activeUserId);    \r\n    p5.stroke(color);\r\n    p5.strokeWeight(strokeWidth);\r\n    p5.line(p5.mouseX, p5.mouseY, p5.pmouseX, p5.pmouseY);\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: \"500px\", height: \"500px\", cursor: \"crosshair\" }}>\r\n        <Popup\r\n          trigger={<Icon name='eye dropper' style={{position:\"absolute\", right:\"5%\", top:\"30px\" }} color='red' size='large'/>}\r\n          on='click'\r\n          content={<SketchPicker \r\n          color={color}\r\n          onChangeComplete={(color) => {setColor(color.hex)}}\r\n          />}          \r\n        />\r\n        <Popup\r\n          trigger={\r\n            <Icon \r\n              name='pencil' \r\n              style={\r\n                {position:\"absolute\", \r\n                right:\"5%\", \r\n                top:\"80px\" }} \r\n              color='red' \r\n              size='large' />}\r\n          on='click'          \r\n          content={\r\n            <Input               \r\n              min=\"1\" \r\n              max=\"50\" \r\n              label=\"px\" \r\n              labelPosition='right'\r\n              value={strokeWidth}\r\n              onChange={(e:any, {value}) => {setstrokeWidth(parseInt(value))}} \r\n              type=\"number\" />}          \r\n        />\r\n      <Sketch setup={setup} mouseDragged={drawLocal} />\r\n    </div>\r\n  )\r\n}","import React, { Component, useState, useEffect } from 'react';\r\nimport AceEditor from \"react-ace\";\r\nimport {codeInterface} from '../sharedInterfaces/codeInterfaces';\r\nimport \"ace-builds/src-noconflict/mode-java\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport client from '../feathers';\r\n\r\ninterface CodeBoxProps{\r\n  apiData: codeInterface;\r\n  uid: string;\r\n}\r\nexport const Codebox = (props: CodeBoxProps) => {  \r\nconst { apiData: apiData, uid } = props;\r\n\r\nconst [code, setCode] = useState<string>(\"\");\r\n\r\nuseEffect(() => {\r\n  setCode(props.apiData.c || \"\");\r\n},[])\r\n\r\n  const onChange = async (c:string = \"\") =>  {    \r\n    const x = {\r\n      uid: uid,\r\n      c:c,\r\n     }\r\n    client.service('code').update(apiData._id, x);\r\n    setCode(c);\r\n  }\r\n\r\n  const data = () => {        \r\n    if(apiData.uid != uid) return apiData.c;\r\n    else return code;\r\n  }\r\n  \r\n  return <AceEditor\r\n    style={{width:\"100%\"}}\r\n    mode=\"javascript\"\r\n    theme=\"monokai\"\r\n    onChange={onChange}\r\n    name=\"code-editor\"\r\n    value={data()}\r\n    highlightActiveLine={true}\r\n    editorProps={{ $blockScrolling: true }}\r\n  /> \r\n}\r\n","import React, { Component, useState } from 'react';\r\nimport client from '../feathers';\r\nimport { useEffect } from 'react';\r\nimport { UsersBar } from \"../components/UsersBar\";\r\nimport { MessageBox } from \"../components/MessageBox\";\r\nimport { Grid, Label } from \"semantic-ui-react\";\r\nimport { InputBox } from \"../components/InputBox\";\r\nimport { SketchBox } from \"../components/SketchBox\";\r\nimport { ISketchData }  from \"../sharedInterfaces/sketchInterfaces\";\r\nimport { UserDetails  as iUserDetails , User } from \"../sharedInterfaces/userInterfaces\";\r\nimport { sketchInfo } from \"../sharedInterfaces/sketchInterfaces\";\r\nimport { codeInterface } from \"../sharedInterfaces/codeInterfaces\";\r\nimport { Codebox } from \"../components/CodeBox\";\r\n\r\ninterface ChatProps {\r\n  users: User[],\r\n  messages: any[];\r\n  userId: string;  \r\n  codeList: codeInterface;\r\n  sketchList : sketchInfo[];\r\n\r\n  getSketchDataFromApi:Function;\r\n}\r\n\r\ntype windowType = (\r\n  \"Chat\" | \"Sketch\" | \"Code\"\r\n);\r\n\r\nconst style = {\r\n  windowLabels: {\r\n    cursor:\"pointer\"\r\n  }\r\n}\r\n\r\nconst Chat = (props: ChatProps) => {\r\n  const { \r\n    users, \r\n    messages, \r\n    userId, \r\n    sketchList, \r\n    codeList,\r\n    getSketchDataFromApi } = props; \r\n  const [window, setWindow] = useState<windowType> (\"Chat\");\r\n  const [cachedUserSketch, setCachedUserSketch] = useState<sketchInfo[]> ([]);  \r\n  \r\n  const sendMessage = (ev: any) => {\r\n    setWindow(\"Chat\");\r\n    const input = ev.target.querySelector('[name=\"text\"]');\r\n    const text = input.value.trim();\r\n\r\n    if (text) { \r\n      client.service('messages').create({ text }).then(() => {\r\n        input.value = '';\r\n      });\r\n    }\r\n\r\n    ev.preventDefault();\r\n  }\r\n  \r\n\r\n  const scrollToBottom = () => {\r\n    //TODO: Add some scroll to bottom stuff here \r\n  }\r\n\r\n  const handleUpdateSketch = (data: ISketchData) =>\r\n      client.service('sketches').create({ data });\r\n   \r\n  const handleSetToChat = () => \r\n    setWindow(\"Chat\");\r\n\r\nconst handleSetToCode = () => \r\n  setWindow(\"Code\");\r\n\r\n  const handleSetToSketch = () => {\r\n    getSketchDataFromApi().then(() => {\r\n      setWindow(\"Sketch\");\r\n    });\r\n    \r\n  }\r\n\r\n  useEffect(() => {\r\n    client.service('messages').on('created', scrollToBottom);\r\n    scrollToBottom();\r\n  }, []);\r\n\r\n  //Clean up on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      client.service('messages').removeListener('created', scrollToBottom);\r\n    };\r\n  }, []);  \r\n\r\n  const sketchBox = () =>\r\n      <SketchBox \r\n        users={users} \r\n        activeUserId={userId}  \r\n        sketchInfo={sketchList} \r\n        onUpdateSketchInfor={handleUpdateSketch}\r\n        cahedUserSketch={cachedUserSketch}\r\n        setCahedUserSketch={setCachedUserSketch}\r\n        />\r\n  \r\n  const codeBox = () =>\r\n       <Codebox uid={userId} apiData={codeList}/>\r\n\r\n  const messageBox = () =>\r\n    <MessageBox messages={messages}/>\r\n\r\n   const windowSelector = () => {\r\n      switch (window) {\r\n        case \"Chat\":\r\n          return messageBox();          \r\n        case \"Sketch\":\r\n          return sketchBox();\r\n        case \"Code\":\r\n          return codeBox();     \r\n      }\r\n    }\r\n\r\n  return (\r\n    <React.Fragment>      \r\n      <br/>\r\n      <div>\r\n        <Grid >\r\n          <Grid.Row>\r\n            <Grid.Column width={1}>\r\n            </Grid.Column>\r\n            <Grid.Column width={4}>\r\n              <UsersBar onLogout={() => client.logout()} users={users} />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n            <Label\r\n              style={style.windowLabels}             \r\n              color={window === \"Chat\" ? \"teal\" : \"grey\" }\r\n              onClick={handleSetToChat}\r\n             >\r\n                Chat\r\n              </Label>\r\n              <Label \r\n                style={style.windowLabels}\r\n                color={window === \"Sketch\" ? \"teal\" : \"grey\" }\r\n                onClick={handleSetToSketch}\r\n                >\r\n                Sketch\r\n              </Label>\r\n              <Label \r\n                style={style.windowLabels}\r\n                color={window === \"Code\" ? \"teal\" : \"grey\" }\r\n                onClick={handleSetToCode}\r\n                >\r\n                Code\r\n              </Label>\r\n             {windowSelector()}      \r\n              <InputBox sendMessage={sendMessage}/>\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Chat;","export const colourPool = [\r\n    '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\r\n    '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC',\r\n    '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\r\n    '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680',\r\n    '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\r\n    '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3',\r\n    '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];","import React, { Component } from 'react'\r\nimport { useState, useEffect, Children } from 'react'\r\nimport Login from './Login';\r\nimport Chat from './Chat';\r\nimport client from '../feathers';\r\nimport { colourPool } from '../tools/colourPool';\r\nimport { UserDetails  as iUserDetails , User } from \"../sharedInterfaces/userInterfaces\";\r\nimport {sketchInfo, ISketchData } from \"../sharedInterfaces/sketchInterfaces\";\r\nimport {codeInterface} from \"../sharedInterfaces/codeInterfaces\";\r\n\r\nlet isLoggedIn = false;\r\n    \r\nconst MessageService = () => {\r\n    const [loginState, setLogin] = useState<iUserDetails>();\r\n    const [messageList, setMessageList] = useState([]);\r\n    const [usersList, setUsers] = useState<User[]>([]);\r\n    const [sketchList,setSketchs] =  useState<sketchInfo[]>([]);\r\n    const [codeList, setCode] = useState<codeInterface>({});\r\n    \r\n    const messages = client.service('messages');\r\n    const users = client.service('users');\r\n    const sketches = client.service('sketches');\r\n    const code = client.service('code');\r\n    \r\n    useEffect(() => {\r\n        // Try to authenticate with the JWT stored in localStorage\r\n        client.authenticate().catch(() => setLogin({}));\r\n\r\n        // On successfull login\r\n        client.on('authenticated', login => {\r\n            // Get all users and messages\r\n            isLoggedIn = true;\r\n            Promise.all([\r\n                messages.find({\r\n                    query: {\r\n                        $sort: { createdAt: -1 },\r\n                        $limit: 25\r\n                    }\r\n                }),                \r\n                users.find(),\r\n                code.find({\r\n                    query: {                       \r\n                        $limit: 1\r\n                    }\r\n                })   \r\n            ]).then(([messagePage, userPage, codePage]) => {\r\n                // We want the latest messages but in the reversed order\r\n                const messages = messagePage.data.reverse();\r\n                const users = userPage.data;\r\n                const code = codePage.data;\r\n                \r\n                setLogin(login);\r\n                setMessageList(messages);\r\n                setUsers(users);\r\n                \r\n                //Cheeky little upsert\r\n                if (code.length > 0)                                         \r\n                    setCode(code[0]);                \r\n                else {\r\n                    const x: codeInterface ={\r\n                        c:\"\",\r\n                        uid: users._id\r\n                    }                    \r\n                    client.service('code').create(x).then((r:any) => {\r\n                        setCode(r);\r\n                      });                      \r\n                }\r\n                \r\n                 \r\n                getSketches();                                \r\n            });\r\n        });\r\n\r\n        // On logout reset all all local state (which will then show the login screen)\r\n        client.on('logout', () => {     \r\n            setLogin({})\r\n            setMessageList([]);\r\n            setUsers([]);\r\n            setSketchs([]);\r\n            setCode({});\r\n            isLoggedIn = false;          \r\n        });\r\n\r\n        // Add new messages to the message list\r\n        messages.on('created', (message: any) => {\r\n            setMessageList(messageList.concat(message));\r\n        });\r\n\r\n        code.on('updated', (code: any) => \r\n            setCode(code)  \r\n        );\r\n\r\n        sketches.on('created', (sketch: any) =>                  \r\n            setSketchs(sketchList.concat(sketch))\r\n        );\r\n\r\n        users.on('created', (user: any) => setUsers(usersList.concat(user)));        \r\n    }, [messageList]);   \r\n \r\n\r\n\r\n    //Helper methods\r\n    const getSketches = async (): Promise<any> => {        \r\n        await sketches.find({\r\n            query: {\r\n                $sort: { createdAt: -1 },\r\n                $limit: 5000\r\n              }\r\n        }).then((sketchesPage:any) => {\r\n            const s = sketchesPage.data;\r\n                \r\n                //Set colour for their sketch bush from the colour pool based on the array position.\r\n                for (let i = 0; i < usersList.length; i++) {\r\n                    if (i > colourPool.length)\r\n                        usersList[i].sketchColour = \"#ffffff\";\r\n                    else\r\n                        usersList[i].sketchColour = colourPool[i];\r\n                }\r\n                 \r\n                let sketchWithColours = [];\r\n                for (let i = 0; i < s.length; i++) {\r\n                    sketchWithColours.push(s[i].data);\r\n                }\r\n                setSketchs(sketchWithColours);\r\n        })\r\n    }\r\n    \r\n    if (loginState === undefined) {\r\n        return <main className=\"container text-center\">\r\n            <h1>Loading...</h1>\r\n        </main>;\r\n    } else if (isLoggedIn) {\r\n        return (\r\n        <React.Fragment>                     \r\n                    <Chat \r\n                        getSketchDataFromApi={getSketches} \r\n                        messages={messageList} \r\n                        users={usersList} \r\n                        sketchList={sketchList}\r\n                        codeList={codeList}  \r\n                        userId={loginState.user ? loginState.user._id : \"\"} />\r\n        </React.Fragment>);\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>   \r\n            <Login />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default MessageService;","import { Route, Switch } from \"react-router\";\r\nimport MessageService from \"./containers/MessageService\";\r\n\r\nimport * as React from 'react';\r\n\r\nconst RouteModule = () => {\r\n    const content = (\r\n        <React.Fragment>\r\n            <Route exact path=\"/\" component={MessageService} />            \r\n        </React.Fragment>\r\n    )\r\n\r\n    return (\r\n        <Switch>\r\n            {content}\r\n        </Switch>)\r\n}\r\n\r\nexport default RouteModule  ","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Chat from \"./containers/Chat\";\r\nimport Login from \"./containers/Login\";\r\nimport RouteModule from \"./routes\";\r\n\r\nconst App: React.FC = () => {\r\n  return(\r\n  <div>\r\n    <RouteModule/>\r\n  </div> ) \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport {BackgroundVid} from \"./components/BackgroundVid\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n    <BackgroundVid/>\r\n        <App />\r\n    </BrowserRouter>,\r\n\r\ndocument.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n","\r\nimport * as React from 'react';\r\nexport const BackgroundVid = () => {\r\n    return (\r\n        <div className=\"video-container\">\r\n           \r\n        </div>)}"],"sourceRoot":""}